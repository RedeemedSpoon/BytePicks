{% extends "base.jinja" %} {% block title %}
<title>BytePicks - Behind the Scene</title>
{% endblock %} {% block content %}
<main id="behind-the-scene">
  <h1 style="margin-bottom: -20px">Behind The Scene</h1>
  <h4>How we operate under the hood.</h4>
  <p>
    Our code is open-source and available on <a href="https://github.com">GitHub</a> because we believe in being transparent. For hosting, we use a simple cloud server from <a href="https://www.vultr.com">Vultr</a> which runs our website, backend, and all the automated scripts. Our domain is from <a href="https://epik.com">Epik</a>. These are our only expenses, and they come out to less than $6 a month. The power of the cloud, I guess...
  </p>
  <p>
    The whole service is built with <a href="https://www.python.org">Python</a>. We use the <a href="https://Flask.palletsprojects.com/">Flask</a> framework to handle all the web-related tasks: routing URLs, managing forms, and providing a simple API. We also use <a href="https://Jinja.palletsprojects.com/">Jinja</a> for templating our pages. For data, we use <a href="https://pandas.pydata.org">Pandas</a> to manage our list of channels (stored in a CSV file) and JSON for storing the video data we collect. Never thought I'd like anything that reminded me of JavaScript, but here we are.
  </p>
  <p>
    For sensitive information like user emails and preferences, we use <a href="https://SQLite.org">SQLite</a>. A few other libraries like <a href="https://jquery.com/">jQuery</a>, python-isodate, and googleapiclient help out with smaller tasks. Honestly, none of this is particularly complicated by today's web development standards, but it gets the job done effectively.
  </p>

  <h4>How do we collect YouTube data?</h4>
  <p>
    We get our data directly from the <a href="https://developers.google.com/youtube/v3">YouTube API</a>. Google provides a Python client library called <a href="https://pypi.org/project/google-api-python-client/">googleapiclient</a> that makes this process pretty straightforward. All we need is an API key from the <a href="https://console.cloud.google.com">Google Cloud Console</a>. The free tier gives us 10,000 quota points a day, which is more than enough for what we need. Here’s how simple it is to get started:
  </p>
  <pre class="code"><code>
<span class="keyword">from</span> <span class="import">googleapiclient</span>.<span class="import">discovery</span> <span class="keyword">import</span> <span class="function">build</span>

<span class="keyword">if</span> <span class="var">__name__</span> <span class="operator">==</span> <span class="str">"__main__"</span>:
   <span class="const">API_KEY</span> <span class="operator">=</span> <span class="import">os</span>.<span class="var">environ</span>.<span class="function">get</span>(<span class="str">"YT_API_KEY"</span>)
   <span class="var">service</span> <span class="operator">=</span> <span class="function">build</span>(<span class="str">"youtube"</span>, <span class="str">"v3"</span>, <span class="const">API_KEY</span>)
</code></pre>
  <div class="small-screen-message">
    <p>Your screen is too small to display the code.</p>
  </div>

  <h4>How do we find new channels?</h4>
  <p>
    We use the YouTube API's `search().list()` method with keywords like "Tech", "Programming", and "Computer Science". We tell the API to only search for channels, sort them by relevance, and bring back 50 results at a time. From these results, we only need the channel ID. After we have a list of IDs, we loop through them and use the `channels().list()` method on each one to get detailed information like the channel's name, URL, icon, and statistics. Here’s what an entry looks like in our CSV file for Fireship:
  </p>

  <pre class="code"><code>
ChannelID,<span class="keyword">ChannelName</span>,<span class="function">ChannelIcon</span>,<span class="str">ChannelUrl</span>,<span class="comment">ExistedSince</span>,<span class="var">SubscriberCount</span>,<span class="int">VideoCount</span>,<span class="bool">ViewCount</span>,<span class="operator">Country</span>
CsBjURrPoezykLs9EqgamOA,<span class="keyword">Fireship</span>,<span class="function">https://yt3.ggpht.com/ytc/AIf8zZTUVa5AeFd3m5-4fdY2hEaKof3Byp8VruZ0f0FNEA</span>,
<span class="str">https://www.youtube.com/@fireship</span>,<span class="comment">2017-04-07</span>,<span class="var">2750000</span>,<span class="int">601</span>,<span class="bool">364500037</span>,<span class='operator'>US</span>
   </code></pre>
  <div class="small-screen-message">
    <p>Your screen is too small to display the code.</p>
  </div>
  <p>
    We add this new data to our existing list, then use pandas to remove any duplicates or rows with missing data before saving it back to the CSV. We also manually add channels we like (like Louis Rossmann) and periodically remove any channels that are inactive or low-quality. The process looks something like this:
  </p>
  <pre class="code"><code>
<span class="var">request</span> <span class="operator">=</span> <span class="var">service</span>.<span class="function">search</span>().<span class="function">list</span>(
   <span class="var">q</span><span class="operator">=</span><span class="str">"Tech | Programming | Computer Science"</span>,
   <span class="var">type</span><span class="operator">=</span><span class="str">"channel"</span>, <span class="var">part</span><span class="operator">=</span><span class="str">"id"</span>,
   <span class="var">maxResults</span><span class="operator">=</span><span class="int">50</span>, <span class="var">order</span><span class="operator">=</span><span class="str">"relevance"</span>, 
   <span class="var">relevanceLanguage</span><span class="operator">=</span><span class="str">"en"</span>, <span class="var">regionCode</span><span class="operator">=</span><span class="str">"US"</span>
)

<span class="var">response</span> <span class="operator">=</span> <span class="var">request</span>.<span class="function">execute</span>()
<span class="keyword">for</span> <span class="var">item</span> <span class="keyword">in</span> <span class="var">response</span>.<span class="function">get</span>(<span class="str">"items"</span>, []):
   <span class="var">temp_id</span> <span class="operator">=</span> <span class="var">item</span>[<span class="str">"id"</span>][<span class="str">"channelId"</span>]
   <span class="var">searched_channels</span>.<span class="function">append</span>(<span class="var">temp_id</span>)

<span class="comment"># Other code...</span>    

<span class="keyword">for</span> <span class="var">channel</span> <span class="keyword">in</span> <span class="var">searched_channels</span>:
   <span class="var">request</span> <span class="operator">=</span> <span class="var">service</span>.<span class="function">channels</span>().<span class="function">list</span>(<span class="var">part</span><span class="operator">=</span>[<span class="str">"snippet"</span>, <span class="str">"statistics"</span>, ... ], <span class="var">id</span><span class="operator">=</span><span class="var">channel</span>)
   <span class="var">response</span> <span class="operator">=</span> <span class="var">request</span>.<span class="function">execute</span>()

   <span class="var">channel_info</span> <span class="operator">=</span> {
      <span class="str">"ChannelID"</span>: <span class="var">response</span>[<span class="str">"items"</span>][<span class="int">0</span>][<span class="str">"id"</span>][<span class="str">"channelId"</span>],
      <span class="str">"ChannelURL"</span>: <span class="var">response</span>[<span class="str">"items"</span>][<span class="int">0</span>][<span class="str">"snippet"</span>][<span class="str">"customUrl"</span>],
      <span class="str">"ChannelName"</span>: <span class="var">response</span>[<span class="str">"items"</span>][<span class="int">0</span>][<span class="str">"snippet"</span>][<span class="str">"title"</span>],
      <span class="str">"ChannelIcon"</span>: <span class="var">response</span>[<span class="str">"items"</span>][<span class="int">0</span>][<span class="str">"snippet"</span>]["<span class="str">thumbnails"</span>][<span class="str">"medium"</span>][<span class="str">"url"</span>],
      <span class="comment"># Additional information about that channel</span> 
   }

   <span class="var">channels</span>.<span class="function">append</span>(<span class="var">channel_info</span>)

<span class="var">df</span> <span class="operator"><span class="operator">=</span></span> <span class="var">pd</span>.<span class="class">DataFrame</span>(<span class="var">channels</span>)
<span class="var">df</span> <span class="operator"><span class="operator">=</span></span> <span class="var">pd</span>.<span class="function">concat</span>([<span class="var">channel_df</span>, <span class="var">df</span>], <span class="var">ignore_index</span><span class="operator">=</span><span class="bool">True</span>)
<span class="var">df</span>.<span class="function">drop_duplicates</span>(<span class="var">inplace</span><span class="operator">=</span><span class="bool">True</span>)
<span class="var">df</span>.<span class="function">dropna</span>(<span class="var">inplace</span><span class="operator">=</span><span class="bool">True</span>)
<span class="var">df</span>.<span class="function">to_csv</span>(<span class="str">"channels.csv"</span>, <span class="var">index</span><span class="operator">=</span><span class="bool">False</span>)
   </code></pre>
  <div class="small-screen-message">
    <p>Your screen is too small to display the code.</p>
  </div>
  <p>
    To find channels the API might miss, we also built a simple web scraper using <a href="https://www.selenium.dev/documentation/webdriver/">Selenium WebDriver</a>. It just searches a random tech topic on YouTube, grabs the channel URLs from the results, then clicks a few recommended videos and grabs those channel URLs too. After it runs, we manually use an online tool like <a href="https://www.streamweasels.com/tools/youtube-channel-id-and-user-id-convertor/">YouTube Channel ID Finder</a> to convert the URLs to IDs, and then feed those IDs into our main script. Here’s a piece of the scraper:
  </p>
  <pre class="code"><code>
<span class="var">driver</span> <span class="operator">=</span> <span class="import">webdriver</span>.<span class="function">Firefox</span>(<span class="var">options</span><span class="operator">=</span><span class="var">options</span>)
<span class="var">chosen_topic</span> <span class="operator">=</span> <span class="function">choice</span>(<span class="var">search_terms</span>)
<span class="var">search_terms</span>.<span class="function">remove</span>(<span class="var">chosen_topic</span>)
<span class="var">driver</span>.<span class="function">get</span>(<span class="str">f"https://www.youtube.com/results?search_query={chosen_topic}"</span>)

<span class="var">all_recommended_channels</span> <span class="operator">=</span> <span class="var">driver</span>.<span class="function">find_elements</span>(<span class="import">By</span>.<span class="var">ID</span>, <span class="str">"channel-thumbnail"</span>)
<span class="var">channels</span> <span class="operator">=</span> [<span class="var">channel</span>.<span class="function">get_attribute</span>(<span class="str">"href"</span>).<span class="function">split</span>(<span class="str">"@"</span>)[<span class="int">1</span>] <span class="keyword">for</span> <span class="var">channel</span> <span class="keyword">in</span> <span class="var">all_recommended_channels</span>]

<span class="var">video_links</span> <span class="operator">=</span> <span class="import">driver</span>.<span class="function">find_elements</span>(<span class="import">By</span>.<span class="var">CSS_SELECTOR</span>, <span class="str">"a#video-title"</span>)
<span class="function">choice</span>(<span class="var">video_links</span>[<span class="int">5</span>:]).<span class="function">click</span>()

<span class="keyword">for</span> <span class="var">i</span> <span class="keyword">in</span> <span class="var">range</span>(<span class="int">7</span>):
      <span class="var">recommended_channel</span> <span class="operator">=</span> <span class="import">driver</span>.<span class="function">find_element</span>(<span class="import">By</span>.<span class="var">CSS_SELECTOR</span>, <span class="str">"a.ytd-video-owner-renderer"</span>)
      <span class="var">recommended_video</span> <span class="operator">=</span> <span class="import">driver</span>.<span class="function">find_elements</span>(<span class="import">By</span>.<span class="var">TAG_NAME</span>, <span class="str">"ytd-compact-video-renderer"</span>)
      <span class="function">choice</span>(<span class="var">recommended_video</span>[:<span class="int">5</span>]).<span class="function">click</span>()
      <span class="var">channels</span>.<span class="function">append</span>(<span class="var">recommended_channel</span>.<span class="function">get_attribute</span>(<span class="str">"href"</span>).<span class="function">split</span>(<span class="str">"@"</span>)[<span class="int">1</span>])
      <span class="comment"># Visiting YouTube Channel ID Finder afterward to convert our URLs to channelIDs</span>
	</code></pre>
  <div class="small-screen-message">
    <p>Your screen is too small to display the code.</p>
  </div>
  <p>
    You can download our full database of YouTube channels below. It contains all the channel info we use. Note that some fields might say "Unknown" if the API didn't provide the data. Feel free to use this database for your own projects. If you have channels you'd like to see added or removed, just <a href="{{ url_for('contact')}}">contact us</a>. We believe being open about our data builds trust.
  </p>
  <a href="{{url_for('download')}}" target="_self"
    ><button class="primary-btn" style="scale: 1.1; padding: 15px 20px">Download CSV</button></a
  >

  <h4>How do we get the videos?</h4>
  <p>
    We loop through our channel list CSV and use the `activities().list()` function for each channel ID. This shows us recent uploads. From there, we grab basic info like the video ID, title, and thumbnail. To get more detail, we take that video ID and use the `videos().list()` method. This gives us the important stats like view counts, likes, and duration. Here’s a snippet:
  </p>
  <pre class="code"><code>
<span class="keyword">for</span> <span class="var">channel</span> <span class="keyword">in</span> <span class="var">channel_df</span>[<span class="str">"ChannelID"</span>]:
   <span class="var">request</span> <span class="operator">=</span> <span class="var">service</span>.<span class="function">activities</span>().<span class="function">list</span>(
      <span class="var">part</span><span class="operator">=</span>[<span class="str">"snippet"</span>, <span class="str">"id"</span>, <span class="str">"contentDetails"</span>],
      <span class="var">publishedAfter</span><span class="operator">=</span><span class="var">yesterday</span>.<span class="function">isoformat</span>() <span class="operator">+</span> <span class="str">"T00:00:00Z"</span>,
      <span class="var">channelId</span><span class="operator">=</span><span class="var">channel</span>, <span class="var">maxResults</span><span class="operator">=</span><span class="int">50</span>, <span class="var">fields</span><span class="operator">=</span><span class="const">FIELDS</span>,
   )

   <span class="var">response</span> <span class="operator">=</span> <span class="var">request</span>.<span class="function">execute</span>()
      <span class="keyword">for</span> <span class="var">item</span> <span class="keyword">in</span> <span class="var">response</span>[<span class="str">"items"</span>]:
         <span class="var">channel_name</span> <span class="operator">=</span> <span class="var">item</span>[<span class="str">"snippet"</span>][<span class="str">"channelTitle"</span>]
         <span class="var">channel_id</span> <span class="operator">=</span> <span class="var">item</span>[<span class="str">"snippet"</span>][<span class="str">"channelId"</span>]
         <span class="var">video_id</span> <span class="operator">=</span> <span class="var">item</span>[<span class="str">"contentDetails"</span>][<span class="str">"upload"</span>][<span class="str">"videoId"</span>]
         <span class="comment"># Additional information...</span>

         <span class="var">request</span> <span class="operator">=</span> <span class="var">service</span>.<span class="function">videos</span>().<span class="function">list</span>(<span class="var">id</span><span class="operator">=</span><span class="var">video_id</span>, <span class="var">part</span><span class="operator">=</span>[<span class="str">"statistics"</span>, <span class="str">"snippet"</span>, <span class="str">"contentDetails"]</span>)
         <span class="var">response</span> <span class="operator">=</span> <span class="var">request</span>.<span class="function">execute</span>()
         
         <span class="var">view_count</span> <span class="operator">=</span> <span class="int">int</span>(<span class="var">response</span>[<span class="str">"items"</span>][<span class="int">0</span>][<span class="str">"statistics"</span>][<span class="str">"viewCount"</span>])
         <span class="var">like_count</span> <span class="operator">=</span> <span class="int">int</span>(<span class="var">response</span>[<str>"items"</span>][<span class="int">0</span>][<span class="str">"statistics"</span>][<span class="str">"likeCount"</span>])
         <span class="var">content_rating</span> <span class="operator">=</span> <span class="var">response</span>[<span class="str">"items"</span>][<span class="int">0</span>][<span class="str">"contentDetails"</span>][<span class="str">"contentRating"</span>]
         <span class="var">video_duration</span> <span class="operator">=</span> <span class="import">isodate</span>.<span class="function">parse_duration</span>(<span class="var">response</span>[<span class="str">"items"</span>][<span class="int">0</span>][<span class="str">"contentDetails"</span>][<span class="str">"duration"</span>])
         <span class="comment"># Again, remaining additional information...</span>
</code></pre>
  <div class="small-screen-message">
    <p>Your screen is too small to display the code.</p>
  </div>
  <p>
    Once we have all the data, we apply a few filters. We ignore videos that are less than 30 seconds long, have fewer than 500 views, or aren't in English. We also make sure they are in YouTube's "Science & Technology" or "Education" categories. After filtering, we have a clean list of videos ready for ranking, stored in a JSON file. Here is what one video's data looks like:
  </p>
  <pre class="code"><code>
<span class="var">"ChannelName"</span>: <span class="str">"Fireship"</span>,
<span class="var">"ChannelId"</span>: <span class="str">"UCsBjURrPoezykLs9EqgamOA"</span>,
<span class="var">"ChannelIcon"</span>: <span class="str">"https://yt3.ggpht.com/ytc/AIf8zZTUVa5AeFd3m5-4fdY2hEaKof3Byp8VruZ0f0FNEA"</span>,
<span class="var">"ChannelUrl"</span>: <span class="str">"https://www.youtube.com/@fireship"</span>,
<span class="var">"VideoUrl"</span>: <span class="str">"https://www.youtube.com/watch?v=ky5ZB-mqZKM"</span>,
<span class="var">"VideoTitle"</span>: <span class="str">"AI influencers are getting filthy rich... let's build one"</span>,
<span class="var">"VideoId"</span>: <span class="str">"ky5ZB-mqZKM"</span>,
<span class="var">"PublishedDate"</span>: <span class="str">"2023-11-29 21:06"</span>,
<span class="var">"Thumbnail"</span>: <span class="str">"https://i.ytimg.com/vi/gGWQfV1FCis/mqdefault.jpg"</span>,
<span class="var">"Duration"</span>: <span class="str">"0:04:25"</span>,
<span class="var">"Definition"</span>: <span class="str">"HD"</span>,
<span class="var">"Language"</span>: <span class="str">"EN"</span>,
<span class="var">"Caption"</span>: <span class="bool">false</span>,
<span class="var">"ContentRating"</span>: <span class="bool">false</span>,
<span class="var">"ViewCount"</span>: <span class="int"> 4091018</span>,
<span class="var">"LikeCount"</span>: <span class="int">156078</span>,
<span class="var">"CommentCount"</span>: <span class="int">5052</span>,
<span class="var">"CategoryId"</span>: <span class="int">28</span>
</code></pre>
  <div class="small-screen-message">
    <p>Your screen is too small to display the code.</p>
  </div>

  <h4>How do we sort and rank these videos?</h4>
  <p>
    This is the core of our system. We use a custom algorithm to give each video a score. It’s based on two main parts: a "Quality Multiplier" and the video's stats. First, we calculate the Quality Multiplier by converting non-numeric data into scores. For example, a video gets a higher score if it has captions or is in HD. We also give a small boost to longer videos and smaller channels, while slightly penalizing massive channels to help surface new content. This gives us a single multiplier for each video.
  </p>
  <p class="math">
    QualityMultiplier = SubscriberBalance × DefinitionQuality × CaptionQuality × RatingQuality × DurationQuality
  </p>
  <div class="small-screen-message">
    <p>Your screen is too small to display the formula.</p>
  </div>
  <p>
    Next, we look at the actual stats: views, likes, and comments. To prevent massive numbers from skewing the results, we normalize them with a log function. We then give more weight to comments and likes than to views, since they are better indicators of engagement. We add these weighted stats together, multiply them by the Quality Multiplier from the first step, and scale the result by 100 to get a clean final number. The formula is simple:
  </p>
  <p class="math">Rating = (ViewRate + LikeRate + CommentRate) × QualityMultiplier</p>
  <div class="small-screen-message">
    <p>Your screen is too small to display the formula.</p>
  </div>
  <p>
    Once every video has a rating, we can sort them. We use a simple Python script to handle this. For the weekly and monthly lists, we just combine the new daily videos with the existing ones, re-sort everything, and keep the top N. Finally, we save the sorted lists back into our JSON files, ready to be sent out in the newsletter.
  </p>
  <pre class="code"><code>
<span class="keyword">for</span> <span class="var">lang</span>, <span class="var">all_videos</span> <span class="keyword">in</span> <span class="var">videos</span>.<span class="function">items</span>():
    <span class="keyword">for</span> <span class="var">time</span> <span class="keyword">in</span> [<span class="str">"daily"</span>, <span class="str">"weekly"</span>, <span class="str">"monthly"</span>, <span class="str">"yearly"</span>]:
        <span class="keyword">with</span> <span class="function">open</span>(<span class="keyword">f</span><span class="str">"{time}.json"</span>, <span class="str">"r"</span>) <span class="keyword">as</span> <span class="var">f</span>:
            <span class="var">data</span> <span class="operator">=</span> <span class="var">json</span>.<span class="function">load</span>(<span class="var">f</span>)

        <span class="keyword">if</span> <span class="var">time</span> <span class="operator">==</span> <span class="str">"daily"</span>:
            <span class="var">top_day</span> <span class="operator">=</span> <span class="import">OrderedDict</span>(<span class="function">sorted</span>(<span class="var">all_videos</span>.<span class="function">items</span>(), <span class="var">key</span><span class="operator">=</span><span class="keyword">lambda</span> <span class="var">item</span>: <span class="var">item</span>[<span class="int">0</span>], <span class="var">reverse</span><span class="operator">=</span><span class="const">True</span>))
            <span class="var">data</span>[<span class="var">lang</span>] <span class="operator">=</span> <span class="import">OrderedDict</span>(<span class="function">list</span>(<span class="var">top_day</span>.<span class="function">items</span>()))

        <span class="keyword">elif</span> <span class="var">time</span> <span class="operator">==</span> <span class="str">"weekly"</span>:
            <span class="var">top_week</span> <span class="operator">=</span> <span class="function">update_videos</span>(<span class="var">data</span>[<span class="var">lang</span>], <span class="var">time</span>)
	    <span class="var">top_week</span>.<span class="function">update</span>(<span class="import">OrderedDict</span>(<span class="function">list</span>(<span class="var">top_day</span>.<span class="function">items</span>())[:<span class="int">50</span>]))
            <span class="var">top_week</span> <span class="operator">=</span> <span class="function">sort_videos</span>(<span class="var">top_week</span>)
            <span class="var">data</span>[<span class="var">lang</span>] <span class="operator">=</span> <span class="var">top_week</span>

	<span class="comment"># Same thing for monthy & yearly videos</span>

         <span class="keyword">with</span> <span class="function">open</span>(<span class="keyword">f</span><span class="str">"{time}.json"</span>, <span class="str">"w"</span>) <span class="keyword">as</span> <span class="var">f</span>:
            <span class="var">json</span>.<span class="function">dump</span>(<span class="var">data</span>, <span class="var">f</span>, <span class="var">indent</span><span class="operator">=</span><span class="int">4</span>)
</code></pre>
  <div class="small-screen-message">
    <p>Your screen is too small to display the code.</p>
  </div>
</main>
{% endblock %}
